#!/usr/bin/env python

import argparse
import numpy as np
import h5py
import bossdata
import tpcorr

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-p', '--plate', type=int, default=6641,
        help='plate id')
    parser.add_argument('-m', '--mjd', type=str, default=None,
        help='observation mjd')
    parser.add_argument('--output', type=str, default=None,
        help='output filename')
    parser.add_argument('--wlen-grid-steps', type=int, default=15,
        help='Number of wlen grid steps to use for correction calculation (between 3500-10500 incl.)')
    parser.add_argument('--save-guide-plots', action='store_true',
        help='Save per exposure guide plots.')
    parser.add_argument('--save-debug-data', action='store_true',
        help='Save per exposure offset data.')
    parser.add_argument('--all-plates', action='store_true',
        help='Run over all plates')
    args = parser.parse_args()

    finder = bossdata.path.Finder()
    mirror = bossdata.remote.Manager()

    if args.all_plates:
        platelist = bossdata.meta.Database(platelist=True)
        # Select columns from "good" plates
        good_plates = platelist.select_all(what='PLATE,MJD', where='PLATEQUALITY="good"')

        filename = 'corrections.hdf5' if args.output is None else args.output
        outfile = h5py.File(filename, 'w')

        for good_plate in good_plates[:10]:
            plate, mjd = good_plate['PLATE'], good_plate['MJD']
            obs = tpcorr.observation.Observation(plate, mjd, wlen_grid_steps=args.wlen_grid_steps)
            corrections, avg_corrections, guided_centroids = obs.get_corrections()
            if str(plate) not in outfile:
                outfile.create_group(str(plate))
            grp_plate = outfile[str(plate)]
            if str(mjd) not in grp_plate:
                grp_plate.create_group(str(mjd))
            grp_plate_mjd = grp_plate[str(mjd)]
            for fiber, avg_correction in zip(obs.fiber_ids, avg_corrections):
                grp_plate_mjd.create_dataset(str(fiber), data=avg_correction, dtype='f4')
        outfile.create_dataset('wave', data=obs.wlen_grid)
        outfile.close()
        return 0

    # If no mjd is provided, try to guess. For plates with multiple pluggings, print list of mjds and exit.
    if args.mjd is None:
        mjd_list = bossdata.meta.get_plate_mjd_list(
            args.plate, finder=finder, mirror=mirror)
        if len(mjd_list) == 0:
            print('Plate {0:d} has not been observed with good data quality.'.format(
                args.plate))
            return -1
        elif len(mjd_list) > 1:
            print('Plate {0:d} has been observed on MJDs {1:s}.'.format(
                args.plate, ','.join(map(str, mjd_list))))
            print('Select one of these using the --mjd command-line argument.')
            return -1
        else:
            args.mjd = mjd_list[0]

    # open output file
    filename = 'corrections-%s-%s.hdf5' % (str(args.plate), str(args.mjd)) if args.output is None else args.output
    outfile = h5py.File(filename, 'w')

    # Calculate offsets for individual exposures
    # offsets = calculate_target_offsets(args.plate, args.mjd, wlen_grid_steps=args.wlen_grid_steps,
    #     save_guide_plots=args.save_guide_plots)

    obs = tpcorr.observation.Observation(args.plate, args.mjd, wlen_grid_steps=args.wlen_grid_steps)
    # offsets = obs.get_offset_summary()

    # Calculate average correction from individual exposure offsets
    corrections, avg_corrections, guided_centroids = obs.get_corrections()

    # Save corrections to output file
    outfile.create_dataset('wave', data=obs.wlen_grid)
    outfile.create_group(str(args.plate))
    outfile[str(args.plate)].create_group(str(args.mjd))

    for fiber, avg_correction in zip(obs.fiber_ids, avg_corrections):
        dset = outfile.create_dataset('/'.join(map(str,[args.plate,args.mjd,fiber])), data=avg_correction, dtype='f4')
    outfile.close()

    if args.save_debug_data:
        filename = 'debug_' + filename
        outfile = h5py.File(filename, 'w')
        outfile.create_dataset('wave', data=obs.wlen_grid)
        plate_grp = outfile.create_group(str(args.plate))
        platemjd_grp = plate_grp.create_group(str(args.mjd))

        exp_corrections = np.mean(corrections, axis=-1)

        platemjd_grp.create_dataset('offset_x0', data=obs.offset_x0.to(u.mm).value)
        platemjd_grp.create_dataset('offset_y0', data=obs.offset_y0.to(u.mm).value)
        platemjd_grp.create_dataset('offset_x0_std', data=obs.offset_x0_std.to(u.mm).value)
        platemjd_grp.create_dataset('offset_y0_std', data=obs.offset_y0_std.to(u.mm).value)
        platemjd_grp.create_dataset('fibers', data=obs.fiber_ids)
        platemjd_grp.create_dataset('obs_seeing', data=[seeing.to(u.arcsec).value for seeing in obs.seeing])
        platemjd_grp.create_dataset('obs_ha', data=[ha.to(u.degree).value for ha in obs.ha])
        platemjd_grp.create_dataset('obs_pressure', data=[pressure.to(u.kPa).value for pressure in obs.pressure])
        platemjd_grp.create_dataset('obs_temperature', data=[temperature.to(u.deg_C).value for temperature in obs.temperature])

        for exp_index in range(obs.spec_file.num_exposures):
            exp_grp = platemjd_grp.create_group(str(exp_index))
            guided_x, guided_y = guided_centroids[exp_index]
            exp_guided_x = np.mean(guided_x, axis=-1)
            exp_guided_y = np.mean(guided_y, axis=-1)

            for i,fiber in enumerate(obs.fiber_ids):
                fiber_grp = exp_grp.create_group(str(fiber))

                fiber_grp.attrs['x0'] = obs.offset_x0[i].to(u.mm).value
                fiber_grp.attrs['y0'] = obs.offset_y0[i].to(u.mm).value
                fiber_grp.attrs['x0_std'] = obs.offset_x0_std[i].to(u.mm).value
                fiber_grp.attrs['y0_std'] = obs.offset_y0_std[i].to(u.mm).value
                fiber_grp.create_dataset('correction', data=exp_corrections[exp_index,i])
                fiber_grp.create_dataset('guided_x', data=exp_guided_x[i].to(u.mm).value)
                fiber_grp.create_dataset('guided_y', data=exp_guided_y[i].to(u.mm).value)


if __name__ == "__main__":
    main()

