#!/usr/bin/env python

import argparse
import numpy as np
import h5py
import bossdata
import tpcorr

import astropy.units as u

def save_debug_data(obs, corrections, guided_centroids, filename):

    outfile = h5py.File(filename, 'w')
    outfile.create_dataset('wave', data=obs.wlen_grid)
    plate_grp = outfile.create_group(str(obs.plate))
    platemjd_grp = plate_grp.create_group(str(obs.mjd))

    exp_corrections = np.mean(corrections, axis=-1)

    platemjd_grp.create_dataset('offset_x0', data=obs.offset_x0.to(u.mm).value)
    platemjd_grp.create_dataset('offset_y0', data=obs.offset_y0.to(u.mm).value)
    platemjd_grp.create_dataset('offset_x0_std', data=obs.offset_x0_std.to(u.mm).value)
    platemjd_grp.create_dataset('offset_y0_std', data=obs.offset_y0_std.to(u.mm).value)
    platemjd_grp.create_dataset('fibers', data=obs.fiber_ids)
    platemjd_grp.create_dataset('obs_seeing', data=obs.seeing.to(u.arcsec).value)
    platemjd_grp.create_dataset('obs_ha', data=obs.ha.to(u.degree).value)
    platemjd_grp.create_dataset('obs_pressure', data=obs.pressure.to(u.kPa).value)
    platemjd_grp.create_dataset('obs_temperature', data=obs.temperature.to(u.deg_C).value)

    for exp_index in range(obs.spec_file.num_exposures):
        exp_grp = platemjd_grp.create_group(str(exp_index))
        guided_x, guided_y = guided_centroids[exp_index]
        exp_guided_x = np.mean(guided_x, axis=-1)
        exp_guided_y = np.mean(guided_y, axis=-1)

        for i,fiber in enumerate(obs.fiber_ids):
            fiber_grp = exp_grp.create_group(str(fiber))

            fiber_grp.attrs['x0'] = obs.offset_x0[i].to(u.mm).value
            fiber_grp.attrs['y0'] = obs.offset_y0[i].to(u.mm).value
            fiber_grp.attrs['x0_std'] = obs.offset_x0_std[i].to(u.mm).value
            fiber_grp.attrs['y0_std'] = obs.offset_y0_std[i].to(u.mm).value
            fiber_grp.create_dataset('correction', data=exp_corrections[exp_index,i])
            fiber_grp.create_dataset('guided_x', data=exp_guided_x[i].to(u.mm).value)
            fiber_grp.create_dataset('guided_y', data=exp_guided_y[i].to(u.mm).value)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-p', '--plate', type=int, default=None,
        help='plate id')
    parser.add_argument('-m', '--mjd', type=str, default=None,
        help='observation mjd')
    parser.add_argument('--output', type=str, default=None,
        help='output filename')
    parser.add_argument('--wlen-grid-steps', type=int, default=15,
        help='Number of wlen grid steps to use for correction calculation (between 3500-10500 incl.)')
    parser.add_argument('--save-guide-plots', action='store_true',
        help='Save per exposure guide plots.')
    parser.add_argument('--save-debug-data', action='store_true',
        help='Save per exposure offset data.')
    parser.add_argument('--max-obs', type=int, default=0,
        help='Maximum number of observations to calculate corrections for')
    parser.add_argument('--start-plate', type=int, default=0,
        help='Skip to start at this plate')
    args = parser.parse_args()

    finder = bossdata.path.Finder()
    mirror = bossdata.remote.Manager()

    if args.plate:
        # If no mjd is provided, try to guess. For plates with multiple pluggings, print list of mjds and exit.
        if args.mjd is None:
            mjd_list = bossdata.meta.get_plate_mjd_list(
                args.plate, finder=finder, mirror=mirror)
            if len(mjd_list) == 0:
                print('Plate {0:d} has not been observed with good data quality.'.format(
                    args.plate))
                return -1
            elif len(mjd_list) > 1:
                print('Plate {0:d} has been observed on MJDs {1:s}.'.format(
                    args.plate, ','.join(map(str, mjd_list))))
                print('Select one of these using the --mjd command-line argument.')
                return -1
            else:
                args.mjd = mjd_list[0]


        # Initialize observation model
        obs = tpcorr.observation.Observation(args.plate, args.mjd, wlen_grid_steps=args.wlen_grid_steps)

        if len(obs.offset_targets) > 0:
            # open output file
            filename = 'corrections-%s-%s.hdf5' % (str(args.plate), str(args.mjd)) if args.output is None else args.output
            outfile = h5py.File(filename, 'w')

            # Calculate average correction from individual exposure offsets
            corrections, avg_corrections, guided_centroids = obs.get_corrections()

            # Save corrections to output file
            outfile.create_dataset('wave', data=obs.wlen_grid)
            outfile.create_group(str(args.plate))
            outfile[str(args.plate)].create_group(str(args.mjd))

            for fiber, avg_correction in zip(obs.fiber_ids, avg_corrections):
                outfile.create_dataset('{}/{}/{}'.format(args.plate,args.mjd,fiber), data=avg_correction, dtype='f4')
            outfile.close()

            if args.save_debug_data:
                save_debug_data(obs, corrections, guided_centroids, 'debug_' + filename)
    else:
        # If no plate is provided, run over all plates.
        platelist = bossdata.meta.Database(platelist=True)
        # Select columns from "good" plates
        good_plates = platelist.select_all(what='PLATE,MJD', where='PLATEQUALITY="good"')
        
        # Open output file
        filename = 'corrections.hdf5' if args.output is None else args.output
        outfile = h5py.File(filename, 'w')

        max_obs = len(good_plates) if (args.max_obs == 0) else args.max_obs

        print('Found {:d} good oberservations, computing corrections for {:d}.'.format(len(good_plates), max_obs))
        print('Results will be saved to: {:s}'.format(filename))

        # Loop over good plates
        for good_plate in good_plates[:max_obs]:
            plate, mjd = good_plate['PLATE'], good_plate['MJD']
            # These two plates do not have any offset targets (and they're 
            # missing r2 exposures which requires causes an error when obs 
            # initialized below).
            if plate in (7334, 7336):
                continue
            # This plate has an issue with exposure names missing in header data
            # skip for now.
            if plate == 6138:
                print 'Skipping plate 6138.'
                continue
            if plate < args.start_plate:
                continue
            # Initialize observation model
            obs = tpcorr.observation.Observation(plate, mjd, wlen_grid_steps=args.wlen_grid_steps)
            if len(obs.offset_targets) == 0:
                continue
            # Calculate average correction from individual exposure offsets
            corrections, avg_corrections, guided_centroids = obs.get_corrections()
            # Create plate
            outfile_grp = outfile.create_group('{}/{}'.format(plate, mjd))
            outfile_grp.attrs['design_ha'] = obs.design_ha.to(u.deg).value
            outfile_grp.attrs['design_alt'] = obs.design_alt.to(u.deg).value
            outfile_grp.attrs['ha'] = np.mean(obs.ha.to(u.deg).value)
            outfile_grp.attrs['alt'] = np.mean(obs.alt.to(u.deg).value)

            # Loop over offset fibers
            for fiber, avg_correction in zip(obs.fiber_ids, avg_corrections):
                # Save exposure averaged correction
                outfile_grp.create_dataset(str(fiber), data=avg_correction, dtype='f4')
        outfile.create_dataset('wave', data=obs.wlen_grid)
        outfile.close()
    

if __name__ == "__main__":
    main()

